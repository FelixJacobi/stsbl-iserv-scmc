#!/usr/bin/perl -T -CSDAL

use warnings;
use strict;
use Bytes::Random::Secure;
use Cwd qw(abs_path);
use IServ::DB;
use IServ::SSH;
use Stsbl::IServ::IO;
use Stsbl::IServ::Log;
use Stsbl::IServ::Security;

my $m_ip = qr/[\d.:]{1,64}/;

my $login_pwd = $ENV{PASSWORD} // $ENV{SESSPW};
my ($login_ip) = ($ENV{IP} // "") =~ /^($m_ip)$/;
my ($login_ip_fwd) = ($ENV{IPFWD} // "") =~ /^($m_ip)$/;
my ($scmc_token, $scmc_sessionpw) = ($ENV{SCMC_SESSIONTOKEN}, $ENV{SCMC_SESSIONPW});
undef %ENV;
$ENV{PATH} = "/usr/sbin:/usr/bin:/sbin:/bin";

my $has_years = 0;
$has_years = 1 if ($ARGV[0] eq "getdata" and @ARGV >= 4) or ($ARGV[0] eq "putdata" and @ARGV >= 5);

if (@ARGV < 3)
{
  print STDERR "Usage: scmcadm COMMAND ARGS\n\n";
  print STDERR "Command getdata: LOGIN SERVERID [YEARS]\n";
  print STDERR "Command putdata: LOGIN SERVERID ZIPFILE [YEARS]\n";
  print STDERR "Command storekey: LOGIN SERVERID KEYFILE\n\n";
  print STDERR "Environment: PASSWORD, IP, IPWD, SCMC_SESSIONTOKEN, SCMC_SESSIONPW\n";
  print STDERR "Return of getdata: Folder path of created zip file on STDOUT.\n";
  exit 1;
}

my $cmd = shift @ARGV;
my $login_act = shift @ARGV;

set_ips $login_ip, $login_ip_fwd;
set_credentials $login_act, $login_pwd;
sessauth_auth "scmcadm";

sub check_server_id($)
{
  my $server_id = shift;
  $server_id =~ /^([a-z0-9]([a-z0-9-]*[a-z0-9])?)$/i or error "Invalid Server ID!";
  error "Invalid Server ID!" if not IServ::DB::Do "SELECT 1 FROM scmc_servers WHERE Host = ?", $server_id;
}

sub ssh($$$$)
{
  my ($server_key, $server_user, $server_ip, $cmd) = @_;
  system("ssh", "-i", $server_key, 
    "-o", "StrictHostKeyChecking=no", 
    "-o", "UserKnownHostsFile=/dev/null",
    "-o", "ConnectTimeout=30",
    "-o", "LogLevel=ERROR",
    "-o", "PreferredAuthentications=publickey",
    "$server_user\@$server_ip",
    $cmd) == 0
      or die "ssh failed: $!";
}

sub scp($$$)
{
  my ($server_key, $src, $dest) = @_;
  system("scp", "-i", $server_key, "-o",
    "StrictHostKeyChecking=no", "-o", "UserKnownHostsFile=/dev/null",
    "-o", "ConnectTimeout=30",
    "-o", "LogLevel=ERROR",
    "-o", "PreferredAuthentications=publickey",
    "-r",
    $src,
    $dest) == 0
      or die "scp failed: $!";
}

sub check_path($) 
{
  my $realpath = abs_path shift;
  $realpath =~ /\/tmp\/stsbl-iserv-scmc-(.*)/ or Stsbl::IServ::IO::error "Invalid file path!";
}

sub validate_years(@)
{
  foreach my $year (@_)
  {
    Stsbl::IServ::IO::error "Year $year invalid!" if not $year =~ /([0-9]|[1][0-3])/;
  }
}

sub req_scmc_auth
{
  local %ENV;
  $ENV{SCMC_SESSIONPW} = $scmc_sessionpw;
  ($ENV{SCMC_SESSIONSALT}) = IServ::DB::SelectRow "SELECT sessionpwsalt FROM scmc_sessions WHERE SessionToken = ? AND Act = ? LIMIT 1", $scmc_token, $login_act;
  my $scmc_passwordhash = `/usr/lib/iserv/scmc_php_hash`;
  IServ::DB::Do "SELECT 1 FROM scmc_sessions WHERE SessionToken = ? AND SessionPW = ? AND Act = ? LIMIT 1", $scmc_token, $scmc_passwordhash, $login_act 
    or Stsbl::IServ::IO::error "Invalid scmc session data!";
}

my $random = new Bytes::Random::Secure();

if ($cmd eq "getdata")
{
  req_auth;
  req_priv "scmc_access_frontend";
  req_scmc_auth; 

  my $server_id = shift @ARGV;
  if ($server_id =~ /^(.*)$/)
  {
    $server_id = $1;
  }
  check_server_id $server_id;

  my @years;
  if ($has_years)
  {
    @years = split /,/, shift(@ARGV);
    validate_years @years;
  }

  my ($server_user, $server_type, $server_name, $server_ip) = IServ::DB::SelectRow "SELECT s.SSHAct, s.TomcatType, s.Host, h.IP FROM scmc_servers s JOIN hosts h ON (s.Host = h.Name) WHERE s.Host = ?", $server_id;
  my $server_key = "/var/lib/stsbl/scmc/keys/$server_id";
  
  my $dest_dir = "/tmp/stsbl-iserv-scmc-".$random->string_from('0123456789', 10)."/";
  my $dest_zip = "/tmp/stsbl-iserv-scmc-".$random->string_from('0123456789', 10).".zip";

  # untaint variables (TODO why is this neccessary?!)
  if ($dest_dir =~ /^(.*)$/) {
    $dest_dir = $1;
  } else {
    die "Failed to untaint data!";
  }
  if ($dest_zip =~ /^(.*)$/) {
    $dest_zip = $1;
  } else {
    die "Failed to untaint data!";
  }

  # Should never happen
  die "Insecure destination!" if -d $dest_dir;
  die "Insecure zip path!" if -f $dest_zip;

  mkdir $dest_dir, 00700 or die "Failed to create directory $dest_dir: $!";

  if ($has_years)
  {
    foreach my $year (@years)
    {
      $year =~ /^(.*)$/;
      scp $server_key, "$server_user\@$server_ip:/Zeugnisse/Jahrgang$1/", $dest_dir;
    }
  } else 
  {
    scp $server_key, "$server_user\@$server_ip:/Zeugnisse/Jahrgang*/", $dest_dir;
  }

  chdir $dest_dir or die "Failed to chdir to $dest_dir: $!";
  system("zip", "-q", "-r", $dest_zip, "./") == 0 or
    die "Creating of archive failed: $!";
  my (undef, undef, $www_data_uid) = getpwnam "www-data";
  chown $www_data_uid, 0, $dest_zip;
  chmod 00600, $dest_zip;

  system("rm", "-rf",  $dest_dir) == 0 or warn "Failed to remove destination directory: $!"; 
  print "path=$dest_zip\n";
} elsif ($cmd eq "putdata") 
{
  req_auth;
  req_priv "scmc_access_frontend";
  req_scmc_auth;

  my $server_id = shift @ARGV;
  if ($server_id =~ /^(.*)$/)
  { 
    $server_id = $1;
  }
  check_server_id $server_id;

  my $src_zip = shift @ARGV;

  my @years;
  if ($has_years)
  {
    @years = split /,/, shift(@ARGV);
    validate_years @years;
  }

  my ($server_user, $server_type, $server_name, $server_ip) = IServ::DB::SelectRow "SELECT s.SSHAct, s.TomcatType, s.Host, h.IP FROM scmc_servers s JOIN hosts h ON (s.Host = h.Name) WHERE s.Host = ?", $server_id;
  my $server_key = "/var/lib/stsbl/scmc/keys/$server_id";

  my $dest_dir = "/tmp/stsbl-iserv-scmc-".$random->string_from('0123456789', 10)."/";

  # untaint variables (TODO why is this neccessary?!)
  if ($dest_dir =~ /^(.*)$/) {
    $dest_dir = $1;
  } else {
    die "Failed to untaint data!";
  }
  if ($src_zip =~ /^(.*)$/) {
    $src_zip = $1;
  } else {
    die "Failed to untaint data!";
  }
  
  # check path to prevent illegal files
  check_path $src_zip;

  # Should never happen
  die "Insecure destination!" if -d $dest_dir;
  die "Invalid zip file!" if not -f $src_zip;

  if ($has_years)
  {
    foreach my $year (@years)
    {
      $year =~ /^(.*)$/;
      ssh $server_key, $server_user, $server_ip, "sh -c \"rm -rfv /Zeugnisse/Jahrgang$1/ > /Zeugnisse/delete.log\"";
    }
  } else
  {
    ssh $server_key, $server_user, $server_ip, "sh -c \"rm -rfv /Zeugnisse/Jahrgang*/ > /Zeugnisse/delete.log\"";
  }

  mkdir $dest_dir, 00700 or die "Failed to create directory $dest_dir: $!";
  chdir $dest_dir or die "Failed to chdir to $dest_dir: $!";
  system("unzip", "-q", $src_zip) == 0 or die "Failed to unzip archive $src_zip: $!"; 
  
  if ($has_years)
  {
    foreach my $year (@years)
    {
      $year =~ /^(.*)$/;
      scp $server_key, "./Jahrgang$1", "$server_user\@$server_ip:/Zeugnisse/";
    }
  } else
  {
    scp $server_key, "./", "$server_user\@$server_ip:/Zeugnisse/";
  }

  chdir "/"; 
  system("rm", "-rf", $dest_dir)  == 0 or warn "Failed to remove destination directory: $!";;

  ssh $server_key, $server_user, $server_ip, "sh -c \"find /Zeugnisse/ -type f -exec chmod -v 664 {} \\; > /Zeugnisse/chmod-files.log\"";
  ssh $server_key, $server_user, $server_ip, "sh -c \"find /Zeugnisse/ -type d -exec chmod -v 2775 {} \\; > /Zeugnisse/chmod-dirs.log\"";
  ssh $server_key, $server_user, $server_ip, "sh -c \"chgrp -Rv $server_type /Zeugnisse/ > /Zeugnisse/chgrp.log\"";

  Stsbl::IServ::Log::write_for_module "Zeugnisdaten auf den Server \"$server_name\" hochgeladen", "School Certificate Manager Connector";
} elsif ($cmd eq "storekey")
{
  req_admin;
  req_priv "scmc_admin";

  my $server_id = shift @ARGV;
  if ($server_id =~ /^(.*)$/)
  { 
    $server_id = $1;
  }
  my $key_file = shift @ARGV;
  if ($key_file =~ /^(.*)$/)
  { 
    $key_file = $1;
  }
  check_server_id $server_id;
  check_path $key_file;
  my $dest = "/var/lib/stsbl/scmc/key/$server_id";
  system("cp", "-f", $key_file, $dest) == 0 or die "Failed to copy key: $!";
  chown 0, 0, $dest;
  chmod 00600, $dest;
  unlink $key_file;

} else 
{
  Stsbl::IServ::IO::error "Unknown command $cmd!";
}
